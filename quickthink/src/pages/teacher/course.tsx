import Head from "next/head";
import Link from "next/link";
import {
  ReactNode,
  use,
  useEffect,
  useState,
  createContext,
  useContext,
} from "react";
import { ZodString, set, z } from "zod";
import { Navbar } from "~/components/Navbar";
import { CourseType, UserType } from "~/drizzle/schema";
import { api } from "~/utils/api";
import { CardContainer } from "..";

export type CoursePageContextType = {
  selectedCourse: CourseType | null;
  setSelectedCourse: (course: CourseType | null) => void;
};

export const defaultContext: CoursePageContextType = {
  selectedCourse: null,
  setSelectedCourse: () => {},
};

export const CoursePageContext =
  createContext<CoursePageContextType>(defaultContext);

export default function CoursePage() {
  const [selectedCourse, setSelectedCourse] = useState<CourseType | null>(null);
  const { data, error, isError, isLoading } = api.teacher.getCourses.useQuery();
  const participantAdd = api.courses.addParticipant.useMutation();

  function addParticipant(username: string) {
    if (!selectedCourse) {
      return;
    }
    participantAdd.mutate({
      username: username,
      course_id: selectedCourse.id,
    });
  }

  return (
    <>
      <CoursePageContext.Provider value={{ selectedCourse, setSelectedCourse }}>
        <Head>
          <title>Multiple Choice Test</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="flex h-screen w-full">
          <Navbar></Navbar>
          <CourseListContainer>
            {isLoading ? (
              <>Loading...</>
            ) : (
              <>
                {isError ? (
                  <>An error occurred. {error.message}</>
                ) : (
                  <>
                    <YourCourses courses={data} />
                  </>
                )}
              </>
            )}
          </CourseListContainer>
          <div className="h-full w-full overflow-y-scroll">
            <CourseContainer>
              {!selectedCourse ? (
                <>
                  <div className="text-black">Select a course</div>
                </>
              ) : (
                <>
                  <CourseTopBar course={selectedCourse} />
                  <Input
                    label="Add a participant"
                    validator={usernameValidator}
                    placeholder="Enter a username"
                    buttonValue="Add"
                    handleSubmit={addParticipant}
                    message={
                      "Enter a valid email and make sure shorter than 20 characters"
                    }
                  />
                  <ParticipantList />
                </>
              )}
            </CourseContainer>
          </div>
        </div>
      </CoursePageContext.Provider>
    </>
  );
}
const usernameValidator = z.string().min(5).max(15);

export function CourseListContainer(props: { children: ReactNode }) {
  return (
    <div className="sticky h-full w-[25%] bg-[#EDF0FF] p-3">
      <h1 className="pb-4 text-xl font-bold">Your Courses</h1>
      {props.children ? props.children : null}
    </div>
  );
}

export function YourCourses(props: {
  courses: CourseType[];
  children?: ReactNode;
}) {
  const { selectedCourse } = useContext(CoursePageContext);
  const courses = props.courses;

  return (
    <div className="flex flex-col gap-3">
      <>
        {courses.length === 0 ? (
          <>
            <span className="italic">No courses found</span>
          </>
        ) : (
          <>
            {courses.map((course) => {
              return (
                <CourseInfoContainer
                  course={course}
                  selected={course.id === selectedCourse?.id}
                />
              );
            })}
          </>
        )}
      </>
    </div>
  );
}

export function CourseContainer(props: { children: ReactNode }) {
  const { selectedCourse } = useContext(CoursePageContext);

  return (
    <div
      className={`${
        selectedCourse ? "rounded-lg shadow" : ""
      } w-full max-w-4xl p-3`}
    >
      {props.children}
    </div>
  );
}

export function CourseInfoContainer(props: {
  course: CourseType;
  selected: boolean;
}) {
  const course = props.course;
  const selected = props.selected;
  const { selectedCourse, setSelectedCourse } = useContext(CoursePageContext);

  function handleClick() {
    setSelectedCourse(course);
  }

  return (
    <CardContainer>
      <div
        className={`${
          selected
            ? "outline outline-2 outline-[#1A2643] hover:shadow-md hover:shadow-[#1A2643] hover:outline-[#1A2643]"
            : "outline outline-1 outline-[#CADBFF] hover:shadow-md hover:shadow-[#CADBFF] hover:outline-[#849EFA]"
        } w-full rounded-lg bg-white p-3  transition-all hover:-translate-y-1 `}
        onClick={handleClick}
      >
        <p className="text-ellipsis font-bold">{course.name}</p>
        <p className="text-ellipsis font-light">{course.description}</p>
      </div>
    </CardContainer>
  );
}

export function CourseTopBar(props: { course: CourseType }) {
  const course = props.course;

  return (
    <>
      <div className="rounded-lg border">
        <div className="flex flex-row items-center justify-between gap-2 p-4">
          <div className="flex flex-col">
            <h1 className="text-lg font-bold text-[#1A2643]">{course.name}</h1>
            <p className="text-sm font-light">{course.description}</p>
          </div>
        </div>
        <ul className="flex flex-row justify-between rounded-b-lg bg-[#1A2643] px-3 py-1 text-white"></ul>
      </div>
    </>
  );
}

export function Input(props: {
  handleSubmit: (value: string) => void;
  validator: ZodString;
  label?: string;
  placeholder?: string;
  message?: string;
  buttonValue?: string;
}) {
  const [value, setValue] = useState("");
  const [isError, setError] = useState(false);
  const { placeholder, validator, message, label, handleSubmit, buttonValue } =
    props;

  useEffect(() => {
    if (value === "") {
      setError(false);
      return;
    }
    const validation = validator.safeParse(value);
    console.log(validation.success);
    if (validation.success) {
      setError(false);
      return;
    }
    setError(true);
  }, [value]);

  return (
    <div className="flex flex-col gap-1 rounded-lg border p-2 shadow">
      <label className="text-lg font-bold">{label ? label : ""}</label>
      <div className="flex flex-row justify-between gap-3">
        <input
          value={value}
          placeholder={placeholder ? placeholder : ""}
          onChange={(event) => {
            setValue(event.target.value);
          }}
          className={`${
            isError
              ? "text-red border border-red-500"
              : "border border-gray-300 hover:border-gray-400 "
          } w-[90%] rounded-lg px-2 outline-none transition-all focus:outline-none`}
        />
        <button
          className={`${
            isError || value.length === 0
              ? "bg-blue-200 text-gray-100"
              : "text-white hover:bg-blue-400"
          } rounded-lg bg-blue-300 px-4 py-2 transition-all`}
          onClick={() => {
            if (!isError) {
              handleSubmit(value);
            }
          }}
          disabled={isError || !value}
        >
          {buttonValue ? buttonValue : "Submit"}
        </button>
      </div>
      <p className="text-sm text-red-500">
        {message && isError ? message : null}
      </p>
    </div>
  );
}

export function ParticipantList() {
  const { selectedCourse } = useContext(CoursePageContext);
  if (!selectedCourse) {
    return <>Select a course</>;
  }

  const { data, error, isLoading, isError } =
    api.courses.getParticipants.useQuery({ course_id: selectedCourse.id });

  return (
    <>
      {isLoading ? (
        <>Loading...</>
      ) : (
        <>
          {isError ? (
            <>An error occurred {error.message}</>
          ) : (
            <div className="flex flex-col gap-2 py-2">
              {data.map((value) => {
                const participant = value.users;
                return <Participant participant={participant!} />;
              })}
            </div>
          )}
        </>
      )}
    </>
  );
}

export function Participant(props: { participant: UserType }) {
  const participant = props.participant;
  return (
    <div className="rounded-lg border p-3 shadow">
      <div className="flex flex-row items-center justify-between">
        <div className="flex flex-row items-center gap-2">
          <p className="font-light">
            {participant.firstName} {participant.lastName}
          </p>
          <p className="font-bold italic">@{participant.userName}</p>
        </div>
        <p className="rounded-lg bg-blue-400 px-2 py-1 text-white">
          {participant.role}
        </p>
      </div>
    </div>
  );
}
