import Head from "next/head";
import Link from "next/link";
import {
  ReactNode,
  use,
  useEffect,
  useState,
  createContext,
  useContext,
} from "react";
import { z } from "zod";
import { Navbar } from "~/components/Navbar";
import { CourseType } from "~/drizzle/schema";
import { api } from "~/utils/api";
import { CardContainer } from "..";
import { TeacherPageContextData } from ".";

export type CoursePageContextType = {
  currentCourseId: string;
  setCurrentCourseId: (courseId: string) => void;
};

export const defaultContext: CoursePageContextType = {
  currentCourseId: "",
  setCurrentCourseId: () => {},
};

export const CoursePageContext =
  createContext<CoursePageContextType>(defaultContext);

export default function CoursePage() {
  const [currentCourseId, setCurrentCourseId] = useState("");

  return (
    <>
      <CoursePageContext.Provider
        value={{ currentCourseId, setCurrentCourseId }}
      >
        <Head>
          <title>Multiple Choice Test</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="flex h-screen w-full">
          <Navbar></Navbar>
          <YourCourses>
            <CourseTopBar />
          </YourCourses>
        </div>
      </CoursePageContext.Provider>
    </>
  );
}

export function YourCourses(props: { children?: ReactNode }) {
  const { data, error, isError, isLoading } = api.teacher.getCourses.useQuery();
  const { currentCourseId } = useContext(CoursePageContext);
  return (
    <div className="flex h-screen w-full border border-black">
      <div className="sticky h-full w-[25%] bg-[#EDF0FF] p-3">
        <h1 className="pb-4 text-xl font-bold">Your Tests</h1>
        <div className="flex flex-col gap-3">
          {isError ? (
            <>
              An error occurred.
              {error.message}
            </>
          ) : (
            <>
              {isLoading ? (
                <>Loading...</>
              ) : (
                <>
                  {data.length === 0 ? (
                    <>
                      <span className="italic">No courses found</span>
                    </>
                  ) : (
                    <>
                      {data.map((value) => {
                        return (
                          <CourseInfoContainer
                            course={value}
                            selected={value.id === currentCourseId}
                          />
                        );
                      })}
                    </>
                  )}
                </>
              )}
            </>
          )}
        </div>
      </div>
      <div className="h-full w-full overflow-y-scroll">
        {props.children ? props.children : null}
      </div>
    </div>
  );
}

export function CourseInfoContainer(props: {
  course: CourseType;
  selected: boolean;
}) {
  const course = props.course;
  const selected = props.selected;
  const { currentCourseId, setCurrentCourseId } = useContext(CoursePageContext);

  function handleClick() {
    setCurrentCourseId(course.id);
  }

  return (
    <CardContainer>
      <div
        className={`${
          selected
            ? "outline outline-2 outline-[#1A2643] hover:shadow-md hover:shadow-[#1A2643] hover:outline-[#1A2643]"
            : "outline outline-1 outline-[#CADBFF] hover:shadow-md hover:shadow-[#CADBFF] hover:outline-[#849EFA]"
        } w-full rounded-lg bg-white p-3  transition-all hover:-translate-y-1 `}
        onClick={handleClick}
      >
        <p className="text-ellipsis font-bold">{course.name}</p>
        <p className="text-ellipsis font-light">{course.description}</p>
      </div>
    </CardContainer>
  );
}

export function CourseTopBar() {
  const { currentCourseId } = useContext(CoursePageContext);
  if (!currentCourseId) {
    return <div className="text-black">Select a course</div>;
  }

  const { data, error, isLoading, isError } =
    api.teacher.getCourseDataWithId.useQuery({
      course_id: currentCourseId,
    });

  return (
    <>
      {isLoading ? (
        <>Loading...</>
      ) : (
        <>
          {isError ? (
            <>An error occurred, {error.message}</>
          ) : (
            <div className="rounded-lg border">
              <div className="flex flex-row items-center justify-between gap-2 p-4">
                <div className="flex flex-col">
                  <h1 className="text-lg font-bold text-[#1A2643]">{} </h1>
                  <p className="text-sm">{data.course?.name}</p>
                </div>
              </div>
              <ul className="flex flex-row justify-between rounded-b-lg bg-[#1A2643] px-3 py-1 text-white"></ul>
            </div>
          )}
        </>
      )}
    </>
  );
}
